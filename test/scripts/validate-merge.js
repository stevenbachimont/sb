#!/usr/bin/env node
import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

console.log('üîç Validation de merge en cours...\n');

// Fonction pour ex√©cuter une commande et capturer la sortie
function runCommand(command, description) {
	console.log(`üìã ${description}...`);
	try {
		const output = execSync(command, { encoding: 'utf8', stdio: 'pipe' });
		console.log(`‚úÖ ${description} - Succ√®s`);
		return output;
	} catch (error) {
		console.error(`‚ùå ${description} - √âchec`);
		console.error(error.message);
		process.exit(1);
	}
}

// Fonction pour v√©rifier les changements de fichiers
function checkFileChanges() {
	console.log('üìÅ V√©rification des changements de fichiers...');

	try {
		// Obtenir la liste des fichiers modifi√©s
		const changedFiles = execSync('git diff --name-only HEAD~1 HEAD', { encoding: 'utf8' });

		if (changedFiles.trim()) {
			console.log('üìù Fichiers modifi√©s :');
			changedFiles
				.split('\n')
				.filter((f) => f.trim())
				.forEach((file) => {
					console.log(`   - ${file}`);
				});
		} else {
			console.log('‚ÑπÔ∏è  Aucun fichier modifi√© d√©tect√©');
		}

		return changedFiles
			.trim()
			.split('\n')
			.filter((f) => f.trim());
	} catch (error) {
		console.log('‚ÑπÔ∏è  Impossible de d√©tecter les changements (premi√®re commit ?)');
		return [];
	}
}

// Fonction pour v√©rifier la qualit√© du code
function checkCodeQuality() {
	console.log('\nüîç V√©rification de la qualit√© du code...');

	// V√©rifier que les tests passent
	runCommand('npm run test:unit', 'Tests unitaires');

	// Formater le code automatiquement
	try {
		runCommand('npm run format', 'Formatage automatique du code');
	} catch (error) {
		console.log('‚ö†Ô∏è  Formatage automatique √©chou√©, continuation...');
	}

	// V√©rifier le linting (tol√©rant)
	try {
		runCommand('npm run lint', 'Linting du code');
	} catch (error) {
		console.log('‚ö†Ô∏è  Probl√®mes de linting d√©tect√©s, mais continuation...');
		console.log('üí° Utilisez "npm run format" pour corriger automatiquement');
		// Ne pas faire √©chouer le script pour des probl√®mes de linting
	}

	// V√©rifier la compilation TypeScript
	runCommand('npm run check', 'V√©rification TypeScript');
}

// Fonction pour v√©rifier les d√©pendances
function checkDependencies() {
	console.log('\nüì¶ V√©rification des d√©pendances...');

	try {
		// V√©rifier que package.json existe
		if (!fs.existsSync('package.json')) {
			throw new Error('package.json non trouv√©');
		}

		// V√©rifier que node_modules existe
		if (!fs.existsSync('node_modules')) {
			console.log('üì• Installation des d√©pendances...');
			runCommand('npm ci', 'Installation des d√©pendances');
		}

		console.log('‚úÖ D√©pendances v√©rifi√©es');
	} catch (error) {
		console.error('‚ùå Erreur avec les d√©pendances :', error.message);
		process.exit(1);
	}
}

// Fonction pour v√©rifier la configuration Docker
function checkDockerConfig() {
	console.log('\nüê≥ V√©rification de la configuration Docker...');

	const requiredFiles = ['Dockerfile', 'docker-compose.yml'];

	requiredFiles.forEach((file) => {
		if (fs.existsSync(file)) {
			console.log(`‚úÖ ${file} trouv√©`);
		} else {
			console.error(`‚ùå ${file} manquant`);
			process.exit(1);
		}
	});

	// V√©rifier que Docker est disponible
	try {
		execSync('docker --version', { stdio: 'pipe' });
		console.log('‚úÖ Docker disponible');
	} catch (error) {
		console.error('‚ùå Docker non disponible');
		process.exit(1);
	}
}

// Fonction principale
async function main() {
	console.log('üöÄ D√©but de la validation de merge\n');

	try {
		// V√©rifier les changements de fichiers
		const changedFiles = checkFileChanges();

		// V√©rifier les d√©pendances
		checkDependencies();

		// V√©rifier la qualit√© du code
		checkCodeQuality();

		// V√©rifier la configuration Docker
		checkDockerConfig();

		console.log('\n‚úÖ Validation de merge termin√©e avec succ√®s !');
		console.log('üéâ Le code est pr√™t pour le d√©ploiement');
	} catch (error) {
		console.error('\n‚ùå Validation de merge √©chou√©e :', error.message);
		process.exit(1);
	}
}

// Ex√©cuter le script
main();
